---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: fluent-bit-read
rules:
  - apiGroups: ['']
    resources:
      - namespaces
      - pods
    verbs: ['get', 'list', 'watch']
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  labels:
    k8s-app: fluent-bit
data:
  fluent-bit.conf: |
    [SERVICE]
      Flush        1
      Daemon       off
      Log_Level    trace
      Parsers_File parsers.conf
    [INPUT]
      Name              tail
      Path              /var/log/es.json
      Buffer_Chunk_Size 3MB
      Buffer_Max_Size   487MB
    [FILTER]
      Name         parser
      Parser       docker
      Match        *
      Key_Name     log
      Reserve_Data true
    [FILTER]
      Name     throttle
      Match    *
      Rate     15
      Window   10
      Interval 15s
    [OUTPUT]
      Name        es
      Match       *
      Host        ${ELASTICSEARCH_HOST}
      Port        ${ELASTICSEARCH_PORT}
      Index       .logs
      Type        _doc
      Generate_ID true
      tls         Off
      tls.verify  Off
      HTTP_User   ${ELASTICSEARCH_USERNAME}
      HTTP_Passwd ${ELASTICSEARCH_PASSWORD}
  parsers.conf: |
    [PARSER]
      Name        docker
      Format      json
      Time_Key    timestamp
      Time_Format %Y-%m-%dT%H:%M:%S.%LZ
      Time_Keep   On
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  labels:
    k8s-app: fluent-bit-logging
    version: v1
    kubernetes.io/cluster-service: 'true'
spec:
  selector:
    matchLabels:
      k8s-app: fluent-bit-logging
  template:
    metadata:
      labels:
        k8s-app: fluent-bit-logging
        version: v1
        kubernetes.io/cluster-service: 'true'
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '2020'
        prometheus.io/path: /api/v1/metrics/prometheus
    spec:
      containers:
        - name: fluent-bit
          image: fluent/fluent-bit:1.9.4
          imagePullPolicy: Always
          ports:
            - containerPort: 2020
          env:
            - name: ELASTICSEARCH_HOST
              value: 'elasticsearch-es-http'
            - name: ELASTICSEARCH_PORT
              value: '9200'
            - name: ELASTICSEARCH_USERNAME
              value: elastic
            - name: ELASTICSEARCH_PASSWORD
              value: ELASTICSEARCH_PASSWORD
          volumeMounts:
            - name: varlog
              mountPath: /var/log
              subPath: es.json
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc/
      terminationGracePeriodSeconds: 10
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: fluent-bit-config
          configMap:
            name: fluent-bit-config
      serviceAccountName: fluent-bit
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
        - operator: 'Exists'
          effect: 'NoExecute'
        - operator: 'Exists'
          effect: 'NoSchedule'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit-read
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluent-bit-read
subjects:
  - kind: ServiceAccount
    name: fluent-bit
    namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: '1'
  generation: 1
  name: appbase
spec:
  selector:
    matchLabels:
      app: appbase
  strategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: appbase
    spec:
      containers:
        - env:
            - name: USERNAME
              value: admin
            - name: PASSWORD
              value: admin
            - name: APPBASE_ID
              value: YOUR_APPBASE_ID
            - name: ES_CLUSTER_URL
              value: 'http://elastic:ELASTICSEARCH_PASSWORD@elasticsearch-es-http:9200/'
            - name: LOG_FILE_PATH
              value: '/var/log/es.json'
          image: appbaseio/reactivesearch-api:8.2.0
          imagePullPolicy: IfNotPresent
          name: appbase
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
          volumeMounts:
            - name: varlog
              mountPath: /var/log
              subPath: es.json
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
  replicas: 1
---
apiVersion: v1
kind: Service
metadata:
  name: appbase
  labels:
    app: appbase
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    app: appbase
---
apiVersion: v1
kind: Secret
metadata:
  name: ssl
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZpakNDQTNJQ0NRQ1RCaXR4NVlsbUJqQU5CZ2txaGtpRzl3MEJBUXNGQURDQmhqRUxNQWtHQTFVRUJoTUMKVlZNeEVUQVBCZ05WQkFnTUNFNWxkeUJaYjNKck1SWXdGQVlEVlFRSERBMU9aWGNnV1c5eWF5QkRhWFI1TVJBdwpEZ1lEVlFRS0RBZGhjSEJpWVhObE1Rd3dDZ1lEVlFRTERBTmtaWFl4Q2pBSUJnTlZCQU1NQVNveElEQWVCZ2txCmhraUc5dzBCQ1FFV0VXeGhhMmhoYmtCaGNIQmlZWE5sTG1sdk1CNFhEVEU1TVRFeU5qQXlNak14TjFvWERUSXgKTURRd09UQXlNak14TjFvd2dZWXhDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJREFoT1pYY2dXVzl5YXpFVwpNQlFHQTFVRUJ3d05UbVYzSUZsdmNtc2dRMmwwZVRFUU1BNEdBMVVFQ2d3SFlYQndZbUZ6WlRFTU1Bb0dBMVVFCkN3d0RaR1YyTVFvd0NBWURWUVFEREFFcU1TQXdIZ1lKS29aSWh2Y05BUWtCRmhGc1lXdG9ZVzVBWVhCd1ltRnoKWlM1cGJ6Q0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxzYlVPSDZTbVBBTUhwaQpCWEVxTXJIZGJacDVyQVlWTnhkM1VBc3ZOcjVYTUtRNTBkV1czN3dOdVRITWUyYkJ6dGE4TmJPak9DU3EwaGtXCmphRHVKeitOYkpsNEM5UkYxYVgzOEhGRWN6ZVAyRGFSeXBOT1c1dU5vU3pKR0t2Y3NxYytXZG1sdFBFVEdpNkUKcUZ3SmJrZHd3c2tyTk1vUXg5MVU5UG1VTnpTSFdhdWxCZ3hKc2JqMXlPbGxNRzVlbVpRQVczV2d5UWFUbWd5VQplNHA1R2hscFVybUJPTXRKWGJXaVNOV2hzOVNkYzlLaitSalVJOTBwUlNMQ21tckFZajlvV3U1WXZ4YmdYcmp0CjZYL0Y5QVRjOWRaMFN6NEVkbzVDY1ZNRTl5TnFqKzNLTU90dkFJWEdXc1Z5ZHpMSDlYbkMrSWM1cnZSVXFCZFAKMFBaRXJRWVphcjNKVkVJSTRVTmFBT091NnFrVFhQZDk0alhRdWdmeTA2b2JlZlFSRVE4Z0c0cHFLVE9yV1BvMwpjY2xEc0JoQVJrc0dLYVlXOXZyM0JXeG80ejR0VmdmY3RKS3QxaTVwRzE1bnU3V1RQRVBiR2t0ZDZuSjNrV1F0CklIMUo3cFh6MFRoa1N1Q2VxU3RBMDluUVFmVFhRYW1ob0s3M3lva3h4eGcyd2hKRkpLSnQydnZreUM3SllBVmEKZXlUMGYyWW5lWk5oUlhKdkdldXZzanE1eldlcFpLZEhBYWxHbThTT1JmSW1uTk1acVAzY21LbVQrU2NOV3VwcQpJSXhUMzRNVzB2Zzd1eGZDS1ByaTF1cG5MZDF5NVNsVDBnZSt3T3gxcXZORGRMcVhwU09ENVVubnJCWm1wdVR6CkI1Y3dGZFRLQmRuZVRmeFAyMWlPdkM5WDhGZXZBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFKV2IKZldzMXVORTRia1VERkRqWUE5RmlYRDVIWDAyU1RNbGhrWlk3ZjRaakpxR0dSVVM2cHNFTjE0NGxldXpkWDRHRwpYZUNGRUJQM3paZjBtRFBiUFNqWmp0cGZ5YXpKaUQvMkpLRllwU1BQcnA3aDVLcGx0UTdVREdLYWt6MXgydk5hCk5nYUpiOCtwSmFtNlVYVG5YRXdmelJCTWZTNWh6VlBBRUx6d0ZCbmRNS25NOWZRT29xWTI0UTVFK2VBZ0pnd1kKZndDaGdRQ1FxRzQrOHVWM2l4N0FwRGNXdEJqV3puTWx3RnlMYlQvY052U0FYM1lKb2p4dUVwdGVaYVBpTmNJcwprbGdGY1YwVS9sME5lR0RvY0VxQXZrNjAza3V1UHRRQksrRDMwZGpwc0JmTXpnejIzcTJnMktxNlB2ODFBRmlBCldLVDZyTFMwN3d0T2JNN1UvcVVTQzhidzFtckRKcDZSamxNUExnUWdpY1JDYVRKZnJJMlBvaURMVzE5cm9uOHAKMEp3cjgyQXJmVjdUU0FwOGNMVlozNWh3amtOUkJjeTRrcFp3a24vVlJoVDZGYmJDcmNXYzhLcUJpb1VzMittVQpRWjhUWWl6Nml3WkxudWZBVXovb1VyZ3JJWjNkMS9WU1pnOGJ4RFlaYmRTQzBBdUVidkhOUnAwT2JyZkVtSEFZCjF6Qkw3bEg3UmdIdXAvenM0SXphMDJWS0VuRXpHVmdXZi9IcXE0bXFWZDFNc0U2TFNGcldXZkg5amJGejhxdU8KVzlNdGFJcm1GdnF2ZUFxZVZQeVFnVmljZkh1ZU9uTm5JRDUySTN5ZUUvbFdBdEZrQWh0RW1tTTBXNWs1Qk1uLwpjVCtOUkJjY3BuSFd2N3hEQ2N4Q29wYnVFaVA5NUZUTG5uaUpObDNkCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpSQUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1M0d2dna3FBZ0VBQW9JQ0FRQzdHMURoK2twandEQjYKWWdWeEtqS3gzVzJhZWF3R0ZUY1hkMUFMTHphK1Z6Q2tPZEhWbHQrOERia3h6SHRtd2M3V3ZEV3pvemdrcXRJWgpGbzJnN2ljL2pXeVplQXZVUmRXbDkvQnhSSE0zajlnMmtjcVRUbHViamFFc3lSaXIzTEtuUGxuWnBiVHhFeG91CmhLaGNDVzVIY01MSkt6VEtFTWZkVlBUNWxEYzBoMW1ycFFZTVNiRzQ5Y2pwWlRCdVhwbVVBRnQxb01rR2s1b00KbEh1S2VSb1phVks1Z1RqTFNWMjFva2pWb2JQVW5YUFNvL2tZMUNQZEtVVWl3cHBxd0dJL2FGcnVXTDhXNEY2NAo3ZWwveGZRRTNQWFdkRXMrQkhhT1FuRlRCUGNqYW8vdHlqRHJid0NGeGxyRmNuY3l4L1Y1d3ZpSE9hNzBWS2dYClQ5RDJSSzBHR1dxOXlWUkNDT0ZEV2dEanJ1cXBFMXozZmVJMTBMb0g4dE9xRzNuMEVSRVBJQnVLYWlrenExajYKTjNISlE3QVlRRVpMQmltbUZ2YjY5d1ZzYU9NK0xWWUgzTFNTcmRZdWFSdGVaN3Uxa3p4RDJ4cExYZXB5ZDVGawpMU0I5U2U2Vjg5RTRaRXJnbnFrclFOUFowRUgwMTBHcG9hQ3U5OHFKTWNjWU5zSVNSU1NpYmRyNzVNZ3V5V0FGClduc2s5SDltSjNtVFlVVnlieG5ycjdJNnVjMW5xV1NuUndHcFJwdkVqa1h5SnB6VEdhajkzSmlway9rbkRWcnEKYWlDTVU5K0RGdEw0TzdzWHdpajY0dGJxWnkzZGN1VXBVOUlIdnNEc2RhcnpRM1M2bDZVamcrVko1NndXWnFiawo4d2VYTUJYVXlnWFozazM4VDl0WWpyd3ZWL0JYcndJREFRQUJBb0lDQVFDRDhoZHZ4Sm1CRHA4aExzNjNweEpvCjY4WEhFZGFGMDZBdUpDMkdOWjFkVFE4NFFLNEErWXg5aVEvNFZrTVBpOHpaRVpDdFJZVHFGcXhpbE16N2wvYUYKa3EzcTdBVXJoTFBOZnJOSXJRU3pRZlV2UmxDYzRMMHBUUTlFRGV3Z0JscldKZG9tNmZ4WHBTanBkUk5sRkNGNApyOFF0S1JMcEREeGxrT3ZRdFB6WlJqbXVHWW5TVUlYTDhVZmxqejVBRnVZbXdMbStrY3d4bnhVYm1mb2xCSkdyCktlTDBmblFXcDM0MkFHTnNnOFBWUTlQUnoyQnlhZWVBcHdIaUtXbkxyaSthbDNUSWNEMFJYTmh2Z1JjUXkvL3gKRGdFdllvTk5FTWlxT2FEQTh0ZDFXa2gxWUFodmZxL1hwckdNVzlSRE0wK2d0aVdjOXNpeDlLRTFEMHhFM3RsRQpKUUJTa08xRFRmVGxPWVNzTWNpMlZlMEU1eklkTXJLKzNud3U5T0JOd2ZVVmppaHhTeFpiTFk4TFc4SkJRWEs4Ckl5MTNscUtvUndjYXZMRzdNMU8rMmRyZ3YxQUVtd1FBSlNSdFNQVlkrSUtWaWJmLzFMNnBiWWZuZUd2QTJGRWQKcjNXSnkvZk16d0YyeVR1ZVUyclQ3cnRKWkVxZXBuUlMyNkQ2d0RiMkRpRVRodVFSbTAwQy9NQWZSZStSRWVjMgpXSUZUVGRuVHIzeXIwbTJySTJMVyt6K1dkaitNTFNuOVBwL245Ri9OY3IyRjNCRktHalBWbWJXQko2aFh2Y3ZMClhGQm1sTXBkekxRMWJaaTVoTVVZdGhwY2FocmtzS255QkVYanNKOCs3NGprai9nV1V4OEI2Q1AyK0NJQ001RkQKejNIakd6MHhMdEhvMzRJYlR5S2FRUUtDQVFFQTlseUhSeTZ0T2lpbU1xVUI5a0VMZlMwWk9vTG1zeDdKYWhjegpxRXJjWllqWG42WlR4RTBHLzZ1TXV6WmQxbVBhR0dBTmdLejgyYzd0dFM5UXpsVnVEaWd1cVRNSWY1dUxVMVRqClREalNPM2FZSE84WWpLZ0JHU1g5S0g5SjBWQ3lQRE4vUnZGb1NYZzJwOHo2dlpsSVloQ3JldEMweE9wNVY0aFgKcVRiYlpuL1pKR2xDd3hsaCtmV2dWWWlWU1ZiL2h2THB1VWxnUGxPUmlmby83OXhBYzZoZGVMLzBDRlpsRksxbQpsSU1oOTEySDJGVHhUM2Z5TlJEQ0JJNmEzT3lCQ2owaEJrNENBcVBYenlYejE4anMwK01rWStTT3ZEZVZwRDQ1CklKdHNraGFxYlh3cGxNeEpJNUdVUnJiTkJGb0lLQ1hwdTNOdHpONVF0c1R1cml4Y2d3S0NBUUVBd20xUCsxaDUKWjJGdWFXQXhYSTAxdVJacW9DQlFvOVV5cHJnNUJueVZIQWRhK3FSSEVaYW43ZlZYK2tYN21tTVQ1R2FhQm85cAphdnJ1UXNsWW1Ib2dLbUdBOWVmaDh2cDBEOXMweTlJY05ZclZTUVJmQkNQVkRTUVM5QW5jNTI4eHFXcjZIVXZjCmlGYTVFZEFEZGJHS1BTN295M1d4c2hWUjFmaENFenFIWEFNSVFieGprTDJRNDIyYmNuOU9rRTFiYXRIWGhuL1oKOHYvbHNpOUpGZEYwcmtiTnBwdGlxU3BxdWkwNXN4MkpnT05TRWNqdjBVejJNdkF2YWY0L3h2WExHWUVLb01yNApvNks2Q3lZaUltUHZSaVJaTW5JK092U1FOdENjTzQ5Q1ZHUTRLY3RWdERPbzRwL00zSkZYZ0NIRXZaVmphWEdZCjhvMlZYNk5ET2ZsSVpRS0NBUUF2Ry9weVRpYXAzR1FMZ3lvZzRNZEZwSDRTaGoxL092L2czWmJ2TTRGNW1QVkMKZmhlK2pjd3N6NjBWajR2YUZ6WDVPMFRadWpxUG05WXdzMStNVlNHNmEweWc1alZWMFhTTzlzaVFKcjFzeVh6RQo2Nk9TSWY0enhPUG4vbzhyQzNkSnM3OCszYUxIaWNsSnhSU2RkTlkyaW1HQUZyQzZodXUxSlVrOS9sTnVBanlQCmplRktWV3c2MUJGWXljbGlRTlNVQlpkVDZ3Z1FZd0tOaytEdUNQdjZJZFBkNXpiTzhWWmE0ZDJmd0lPYVBiUmcKVmIzZktGeVVjU1Bvb3l4UjJwZkNVWFlqTW4rSDZiUzIwOWNSQ0ViaExhb2p2K3piYVBXZ2RwV04rcXFFTlBsWgova2dsUC9zc1pnWW9qNFFjdE9xaVlyMlRMcnRzVllheHJHN0h0NHZwQW9JQkFRQ1dtbkFqQk9SOWxQWWV2L2xjCmRMR1JubkNYZXBDY1o0L2xucnZsYjJsZEhjRjJkdnZwL3VZenFDRXU1emkrM1ZKU1VMdXNxemdBTzBHR0VFc0YKU1V4VEo5WHFKV1ZiZm0rYXZMVUgwTWd6SFVpYlY3eDJDMytEdjFiREhFUzJMT2F1RWdTTjN1NkQyWkZmMzk1ZQpNMWtlalpDYjBaNEVrUWtrRWpxMGhGakhpRDNFRmJhV0xwRGw2a2hJQjU4R25qVmE2QkxueDI4L0VNT1BJNXVjClAvUCs3eTlyaDkrRHBDeXA3RkJPazJtb29lMDNnNHRvZUJJWllQMkpQLzJORTJYd2FvbWVCYnRWbmI0NDFxQUkKUFpyaG5WUk9oRG42RnVrQzNOSzRPLzhvT2IxYmVucjNyREI4NDBXZjhTRnpTalVJbVlnNDdGcUtQK3ZkK2l3Zgo0eDRWQW9JQkFRRG9NNUR3cTIzQTFZbEJ3Sk9zWjBaQ0taVWhSRS95c0dXcnd3Ty9ackNMWFJESUo0akVVRkR6ClBqeUNaU2ExcVBLd3VwWlhYcXJ5aWhnR1dwN0hFaTdlZ0R3bEo0OVl1L09TSm5QQktkTjhKQm9sZlpXTkhSZjgKMllWNm5GSnBjWkxCYnhDZDU4ZTQydlM4RUlaWGtiSkNCUDFtb3dVZ0g3TDgzZCtVK0tmMlRBTERLczhuOUlaTQpnS0o2RTl4dFJhcGZYYUZ6NW4xYXRVb1R3YUhLMzdLWUxkNzRHY1ZNOHp5ZklhVlJlZ3JHSnZCSndUTldnTVZSCnFUeThWUnBEbnFTVU5jRGtVWTc0RHNscmNtOXRBWThhZ1M0Skp4YzY5VnUycEhLY2JOQVp3YUJ6SG80ei9QMlMKOHBkY1ZFblhsaXc1YVFXTlBhNGhzalAyRHg3SGNrdEEKLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZpakNDQTNJQ0NRQ09haDcyQ0tOcDdUQU5CZ2txaGtpRzl3MEJBUXNGQURDQmhqRUxNQWtHQTFVRUJoTUMKVlZNeEVUQVBCZ05WQkFnTUNFNWxkeUJaYjNKck1SWXdGQVlEVlFRSERBMU9aWGNnV1c5eWF5QkRhWFI1TVJBdwpEZ1lEVlFRS0RBZGhjSEJpWVhObE1Rd3dDZ1lEVlFRTERBTmtaWFl4Q2pBSUJnTlZCQU1NQVNveElEQWVCZ2txCmhraUc5dzBCQ1FFV0VXeGhhMmhoYmtCaGNIQmlZWE5sTG1sdk1CNFhEVEU1TVRFeU5qQXlNVGcwTVZvWERUSXkKTURreE5UQXlNVGcwTVZvd2dZWXhDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJREFoT1pYY2dXVzl5YXpFVwpNQlFHQTFVRUJ3d05UbVYzSUZsdmNtc2dRMmwwZVRFUU1BNEdBMVVFQ2d3SFlYQndZbUZ6WlRFTU1Bb0dBMVVFCkN3d0RaR1YyTVFvd0NBWURWUVFEREFFcU1TQXdIZ1lKS29aSWh2Y05BUWtCRmhGc1lXdG9ZVzVBWVhCd1ltRnoKWlM1cGJ6Q0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUtwRFVFc2FUVHBRVVoyMgpZU1NDMGZZaldHZ2JKajZWODFkN3NJV1FHaC9BZzZjU1F2MzZjMGxuaGhYTDNTNnhvRWplWTdOSFM1eVl1bFY0CmUxaUEyU1FLNExNNUJIY2EvV2d1c1NadVYrMnBvRVEzbTVlNDQ2SjJObUJPSENNUlVVcjljTTRVbHF1UUQwTXcKQWY1SWlLR3lYaG5lZTFuTGRzcnFBMFN2a0phOWhGYzZxQWJlREFJZGxEb0FSRFhnNnZFWDFadkxXdWdWN29JYwpDdEdtYzFUYlZtdFJ3OExQa0FxV1ZEakVJMnRXK3RGVDNzUm9kMTM0S3BHT2RoTFZPTmgwaEZWTEhpWDJ6QVNxCmJ4ODZETzV3ZmdHV0FMaGpTMFVvVG84amJGaHlkS3RzT0lmWDlDZ0NoV1JBbXJTUFlQSTd5bm13Ti8rT21Ua0wKQ29lWWFxM25PR29Ed0pPRUhsZ0FKYjY1UDU1b1c3Rm1zbjRhSWVnOG43aVFxVVkvTmhWSmtaaWhIam1JVTM5OAphZUZESVpiN0IrV2wrb0lJTUFYRXdhUGJmWXVRSDF5QjIrYXNGaGhjNnRwMDBtZ0FObHh1dXVwcGlnbTZvMjc3CkZ6RzBIaHI2ODduU1AxS2FxVnVFWXRBZ29NWWROaU5HaWJDRlQrWVVWalRJSkIyaXRDRGMxY09XeTg1V0ZuY2kKS2Fzd203V0pDVWZMbEo2eWd2azB2RXROL240dFY2NUdjUG00eHBKM0NyajlPQ29RcXhyVG1wa2IzdUYvZnRnbApYNWJuTlozcUpDTTdUbkJxVUdhYnFqVEt1Tzd3ZVU3UGI2RmpwRE80OTlFZmRnSlNTYzR5VTJmc2k1RTlnZG0zCkhLeGFLVlBGSGxQdzkwQkhpQ05mWGYxaEFhUEJBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFHcXgKOXhXOEg2am45WXhHTk9oeVc3VFpoZE5BcHdvL0t3QTFOZGczRnk0ZjRnMk85OHdCay82ZnNhOEUrNi9vUkZ1QQp0YXFDZFJXd2hyWFE5NE9GU3VVREpiN3o4L25kWk1TOS90bHJObjNSOEpzZjlXK2NITFdjMklmMVR2WHlRcHVGCldqY3haYkU2R2hBU3lPOXZ1QlBMbGtMdzNxNm9DWlZNOHNMSE1lVHMyWW52b0pwN0FYUG1MeURCZ2pTei9PeG8KbmZ0RHVEa1Y3ZHMrSjJrQitGU25oWm96OUZGVkpTTVJkL0ErZGl2M3psVG5LbU5QRER0VVhvRGlRbUpXRThncApLUnN2eG9HLys2NnJIbzJaelp5dllMYS91S2VwUlpxeVJFUXVjdUkxb0cyQko4OG5jc054U3NqUmlrYTRERGF3ClhIZk5KRWVvdHg3SWp5dHY4Q2p3YzMvSmxIMlJxSlRXM3RsTHFHcWdzaVdJZU10V2hNdWNzUlAyQ2pKckc3bHIKRStuZDZRdThFa01IYit6U2tZVzBIRkZCRmhHNDcwYm01QkQvaEZsd04ra1RjdDdlWS92dVh5MGJjM3pHbTRGcwpvZTBKbFhDREF5T1h5Nml3REVoYmZQbkZCVG1vSkVvdVZMU1lBUlYxU2I5VHBVMmxmemp2alM1S3FZd05rV1lrCkhqbUFTelorZVhlQUV2bXdEWmMrUkRWZHZiUFFmeFVYZ080VDdkc2dsaWU0dVNsZmxiV3pDVzRIL29XR0xlMHIKeFlXMThhZHFuSXNpay9XVFFhSWVtVG8vR1RKS0g5ZXYyZE9WK1NwRVV1TEdsYzdWczAxazdubU9UNFVBaWxjUwo0b3BqWHBpQVcwcG1EMU9ETUhxNUU4NTRoWVlqM3ZrMGJJRE1VR0J6Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-service-account
subjects:
  - kind: ServiceAccount
    name: default
    namespace: ingress-nginx
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: '1'
  generation: 1
  labels:
    app: default-http-backend
  name: default-http-backend
  namespace: ingress-nginx
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: default-http-backend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: default-http-backend
    spec:
      containers:
        - image: gcr.io/google_containers/defaultbackend:1.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-http-backend
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: default-http-backend
  name: default-http-backend
  namespace: ingress-nginx
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: default-http-backend
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: '1'
  generation: 1
  name: nginx-ingress-controller
  namespace: ingress-nginx
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ingress-nginx
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
      creationTimestamp: null
      labels:
        app: ingress-nginx
    spec:
      containers:
        - args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.13.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: nginx-ingress-controller
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: 443
              name: https
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'false'
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header 'access-control-expose-headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-Search-Id,X-Search-Client,X-Enable-Telemetry,X-Timestamp,X-Cache,X-Took' always;
    nginx.ingress.kubernetes.io/cors-allow-credentials: "false"
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-Search-Id,X-Search-Click,X-Search-ClickPosition,X-Search-Suggestions-Click,X-Search-Suggestions-ClickPosition,X-Search-Conversion,X-Search-Query,X-Search-Filters,X-Request-Tag,X-Query-Tag,X-Search-State,X-Search-CustomEvent,X-User-Id,X-Search-Client,X-Enable-Telemetry,X-Timestamp,X-Cache,X-Took
    nginx.ingress.kubernetes.io/cors-allow-methods:
      GET, PUT, POST, DELETE, PATCH,
      OPTIONS, HEAD
    nginx.ingress.kubernetes.io/enable-cors: 'true'
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: 'false'
  generation: 2
  name: appbase-ingress
  namespace: default
spec:
  rules:
    - http:
        paths:
          - backend:
              service:
                name: appbase
                port:
                  number: 8000
            path: /
            pathType: Prefix
      # host: k8s-test.searchbase.io
  tls:
    # - hosts:
    #  - k8s-test.searchbase.io
    - secretName: ssl
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: '2019-11-15T12:58:42Z'
  labels:
    app: ingress-nginx
  name: ingress-nginx
  namespace: ingress-nginx
spec:
  externalTrafficPolicy: Cluster
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app: ingress-nginx
  sessionAffinity: None
  type: LoadBalancer
